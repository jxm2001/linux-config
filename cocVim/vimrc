" 映射配置
let mapleader=' '

if has('clipboard')
  " 设置行号
  set number
  " 设置相对行号
  " set relativenumber
endif

" 自动换行
set wrap

" 显示输入
set showcmd

" 显示候选命令
set wildmenu

" 搜索高亮
" set hlsearch
" set incsearch
" nnoremap <leader>e :nohlsearch<cr>

" 设置缩进
set tabstop=4
set softtabstop=4
set shiftwidth=4

" 窗口切换
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" 折叠设置
set foldmethod=indent
nnoremap <leader>w za 
set foldlevel=99

" 快速换行
nnoremap <cr> o<Esc>

" 插件配置

" 设置状态栏主题
let g:airline#extensions#tabline#enabled=1
let g:airline_theme='dark'

" 缩进字符
let g:indentLine_char='┆'

" 主题颜色
set rtp+=~/.vim/plugged/vim-solarized8
syntax enable
set background=dark
colorscheme solarized8_high 

" 文件树配置
nnoremap <leader>v :NERDTreeFind<cr>
nnoremap <leader>g :NERDTreeToggle<cr>
nnoremap <leader>b :Bookmark<space>
" 显示隐藏文件
" let NERDTreeShowHidden=1
" 显示书签
let NERDTreeShowBookmarks=1
let NERDTreeIgnore= ['\.git$','\.swp$']
" 当 NERDTree 是最后一个缓冲区时自动退出
autocmd BufEnter * if winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" 禁止其他窗口替换 NERDTree 窗口 
autocmd BufEnter * if bufname('#') =~ 'NERD_tree_\d\+' && bufname('%') !~ 'NERD_tree_\d\+' && winnr('$') > 1 |
    \ let buf=bufnr() | buffer# | execute "normal! \<C-W>w" | execute 'buffer'.buf | endif

" LeaderF 配置
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }
" shortcut
let g:Lf_ShortcutF = "<leader>pf"
noremap <leader>pb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>pm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>pl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

" 快速跳转
nmap <leader>f <Plug>(easymotion-overwin-f)
" nmap <leader>F <Plug>(easymotion-overwin-f2)
nmap  / <Plug>(easymotion-sn)
nmap  n <Plug>(easymotion-next)
nmap  N <Plug>(easymotion-prev)
nmap <leader>l <Plug>(easymotion-lineforward)
nmap <leader>j <Plug>(easymotion-j)
nmap <leader>k <Plug>(easymotion-k)
nmap <leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline=0

" 文本替换设置
let g:far#enable_undo=1

" which-key 配置
nnoremap <silent> <leader> :WhichKey ' '<CR>

" c++ 高亮配置
let g:cpp_class_scope_highlight = 1
" let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1
let g:cpp_no_function_highlight = 1

" 符号颜色显示
au FileType c,cpp,h,hpp,objc,objcpp,python call rainbow#load()
let g:rainbow_ctermfgs = ['lightblue', 'lightgreen', 'yellow', 'magenta', 'red', 'white']

" coc
let g:coc_global_extensions = [
			\'coc-marketplace',
			\'coc-vimlsp',
			\'coc-json',
			\'coc-clangd',
			\'coc-cmake',
			\'coc-git']
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nnoremap <silent> gh :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
nmap <leader>rn <Plug>(coc-rename)
xmap <leader>s  <Plug>(coc-format-selected)
nmap <leader>s  <Plug>(coc-format-selected)
" 状态列集成
set signcolumn=yes


call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'
Plug 'mhinz/vim-startify'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'yggdroot/indentline'
Plug 'lifepillar/vim-solarized8'
Plug 'scrooloose/nerdtree'
Plug 'Yggdroot/LeaderF', {'do': ':LeaderfInstallCExtension'}
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-surround'
Plug 'brooth/far.vim'
Plug 'tpope/vim-commentary'
Plug 'liuchengxu/vim-which-key'
Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'ryanoasis/vim-devicons'
Plug 'frazrepo/vim-rainbow'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()
